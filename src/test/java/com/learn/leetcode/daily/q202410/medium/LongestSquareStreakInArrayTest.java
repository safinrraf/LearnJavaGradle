package com.learn.leetcode.daily.q202410.medium;

import com.learn.leetcode.daily.w2024.q202410.medium.LongestSquareStreakInArray;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class LongestSquareStreakInArrayTest {

    @Test
    void longestSquareStreak0() {
        var input = new int[]{18532,92682};
        var expected = -1;
        var result = LongestSquareStreakInArray.longestSquareStreak(input);

        assertEquals(expected, result);
    }

    @Test
    void longestSquareStreak1() {
        var input = new int[]{4,3,6,16,8,2};
        var expected = 3;
        var result = LongestSquareStreakInArray.longestSquareStreak(input);

        assertEquals(expected, result);
    }

    @Test
    void longestSquareStreak2() {
        var input = new int[]{2,3,5,6,7};
        var expected = -1;
        var result = LongestSquareStreakInArray.longestSquareStreak(input);

        assertEquals(expected, result);
    }

    @Test
    void longestSquareStreak3() {
        var input = new int[]{57044,68879,916,16512,34776,77929,95685,68153,53877,68617,61264,9172,95471,86374,25292,
                29948,43434,72108,18536,31149,4871,98887,89004,24718,78079,7433,17954,87036,61732,92976,75756,22963,
                41305,86318,2642,85551,41664,47274,30273,13649,62700,18784,86619,67061,7742,61448,83406,17828,16384,
                70815,8431,57596,68118,36095,93523,69623,4603,17368,15193,95191,10133,62694,43974,79584,75489,12104,
                29073,62700,24320,12330,66491,49740,73184,62854,11648,18196,2475,16624,95444,3745,18076,34719,92759,
                17190,42969,59774,83083,88130,45304,77588,20928,74712,96631,22665,28183,59984,3663,83781,11902,48445,
                58424,25315,12874,3960,74187,66127,99769,30927,64001,39377,90658,32484,56058,92466,38484,31137,4672,
                28168,7825,82423,63338,1065,88473,64371,1414,87734,30799,44383,9626,23589,27125,41538,67024,11753,
                43086,83809,89273,51545,34671,97600,97124,56601,43953,3426,87357,93958,78617,40820,79406,35356,22773,
                22331,824,13335,87491,45952,64051,4422,32732,54810,58319,80257,8457,38567,23825,90986,53332,80829,
                42630,84703,92059,71706,82859,10932,44526,75366,94556,63508,97168,93738,50132,97203,37589,25247,91722,
                78975,46174,18243,31035,35123,68799,90306,37986,54070,74776,81358,68775,58324,89562,2414,25662,89651,
                32724,1513,7956,99662,43491,87221,78281,18532,85654,27844,94960,12323,69262,77316,1529,96345,54224,
                31667,11341,74926,81639,22016,15435,21043,75240,44041,41995,63145,31152,11839,44851,41044,25249,
                85228,32416,19363,59340,92682,8985,34620,19582,34092,44460,75180,30065,87239,82190,65554,21533,17823,
                4942,74283,85615,98013,77917,91595,13003,47974,71578,90978,85115,90662,24566,94919,12402,16684,367,
                10186,57090,61947,22330,35424,17835,43363,67607,78103,97290,95214,27559,31675,64594,66189,51482,13368,
                32055,19302,27842,38091,57168,23314,83867,54887,14179,6793,49643,53522,27599,3919,98308,98405,22269,
                61504,79522,40657,49053,4709,67769,39429,48828,88834,42535,76393,48147,65246,80079,76512,89293,71234,
                26528,11235,35342,30643,64679,69718,5338,13441,76133,63183,18984,12510,33658,13884,41050,87905,92799,
                2178,98761,40606,2992,1268,12352,58325,12272,92713,86555,60458,28896,57882,53824,34237,64917,37947,
                75421,37784,17352,23495,91134,13002,65928,4803,50925,24483,11272,48590,52836,56399,95390,432,58075,
                338,45148,17047,53132,69305,47917,90444,5875,17277,2599,25016,6913,56469,117,4518,1307,53562,53695,
                50005,80637,19761,99481,48576,41048,7177,74176,99343,97723,16457,80681,12056,3061,89095,82260,58852,
                33805,20558,45657,18304,269,92630,31192,70905,34505,9195,50200,22082,86326,84806,10492,21917,22761,
                51636,16320,25925,734,45335,8484,25408,92021,17450,93908,85683,29532,58415,37662,24807,32884,30182,
                46622,90526,23834,25559,93765,91897,92480,77494,10466,91615,1590,68506,57006,88513,89690,86031,78750,
                10850,98067,78566,64908,36917,96062,62095,40617,71781,77510,76861,64928,73193,76345,97029,89582,37404,
                95317,80838,52635,54712,65883,18915,83082,70082,17831,73698,8090,42519,48205,12009,59619,1221,1116,
                26697,47161,39833,37243,24516,68473,88943,53000,34773,6454,19789,92058,94593,32766,82773,7813,58033,
                13743,81611,53608,77347,18364,38883,14679,67834,27212,45934,55974,37008,65727,53404,83997,72637,
                44819,57724,54750,72299,67644,28697,45606,19158,39657,78544,25012,97326,65304,95602,8953,82400,31410,
                7022,64694,15879,49639,52297,99627,90946,58074,8175,39406,34826,31611,95607,54453,28082,53560,19953,
                41960,99635,23739,83406,89066,46353,43071,52314,61442,83833,67954,42243,28914,97086,58479,90326,3534,
                73113,20060,69851,92884,66750,4401,70560,50120,96706,59154,4340,92146,88127,65807,71681,22122,22497,
                66145,55604,85965,38885,66467,21991,78039,29510,41360,3191,2104,10791,73824,7699,80362,27776,51333,
                2840,56324,48469,3979,49613,44485,82002,40133
        };
        var expected = -1;
        var result = LongestSquareStreakInArray.longestSquareStreak(input);

        assertEquals(expected, result);
    }

    @Test
    void longestSquareStreak4() {
        var input = new int[]{81,2,4,16,3,9,6561};
        var expected = 4;
        var result = LongestSquareStreakInArray.longestSquareStreak(input);

        assertEquals(expected, result);
    }

    @Test
    void longestSquareStreak5() {
        var input = new int[]{1749,8181,5407,876,8737,1821,6907,3322,1173,4796,5650,8829,4717,8320,786,1690,1135,5130,
                8414,1554,2888,8167,1305,7234,2129,4756,1508,6026,3006,6898,1824,5460,3156,7700,7955,1310,9536,6814,
                183,2736,7004,5928,6233,8479,8166,1790,486,6846,6504,93,1555,953,5058,4436,6883,9051,2369,7262,3374,
                4504,8686,7696,9479,6874,9192,1334,8807,9803,4870,6198,1780,5312,6738,3013,7790,8256,5355,2638,8533,
                9724,454,5790,4884,827,8303,544,2723,5045,2038,2647,3841,1186,2940,5091,11,9470,2407,7365,8135,9071,
                2696,7241,1705,1013,1129,7353,6283,3047,325,5570,9456,4939,8265,342,9117,5086,5509,5468,4160,1281,637,
                9110,9768,4746,5573,8344,8612,4167,4829,7686,5951,8266,1899,5819,1618,7208,4821,8996,6368,7355,9486,
                6834,9067,8877,4316,4074,3311,3490,8998,283,6002,2650,1698,5153,5398,6714,6483,7553,2574,9371,2714,
                6161,5861,4928,7949,6837,8204,2171,7175,1476,6006,9384,317,4535,4423,5027,1730,1905,9314,4700,297,
                8951,1494,1196,2894,9526,6577,9633,3918,5400,6408,7997,118,2242,2590,8494,2769,7406,8219,9980,8525,
                8687,6245,814,3794,9392,7344,220,8760,8028,7100,6320,7863,2468,3276,3285,9182,403,603,8103,9613,5956,
                3050,9382,9094,2799,6825,7638,7590,2782,4303,1259,2482,1609,9592,421,8723,9464,4715,421,6700,7975,
                382,2759,661,3876,666,7449,2579,2923,8919,9150,8607,6907,8701,436,1129,8902,980,4852,3890,4086,9100,
                3837,9484,2497,3037,9427,5301,6427,6751,6398,9403,7650,2636,6417,8387,4325,8968,7749,2058,6257,9826,
                7693,2423,3200,7305,5412,8030,7506,4665,3083,3097,2263,6241,953,8112,5005,9900,2729,3527,5921,5536,
                4884,9542,7815,3364,9608,4729,6855,1844,8030,4824,2067,3040,8940,4961,8878,2476,6429,3378,6734,2959,
                319,8062,1384,2640,3356,2379,9828,1262,2044,9578,5988,7084,3747,9443,298,1848,1654,6837,7865,6736,
                1448,1343,719,3870,6588,8613,8727,9230,1299,5389,5144,3383,9674,221,2943,4209,1113,4626,8999,1098,
                5830,2295,8415,4915,9240,6704,1333,9189,2985,4029,9976,6541,8327,2543,973,8826,2439,7227,4990,1408,
                1290,4075,7872,84,4537,3350,5207,1850,7669,9351,3303,7471,6059,942,7719,5042,861,5723,3523,6576,4119,
                9796,9899,7215,8545,9839,3068,8651,2829,2701,4532,3321,5779,1978,526,6689,4201,5601,760,6369,3374,
                5529,1214,7731,3339,6411,8316,4114,1006,1901,729,2020,7432,1575,9064,2016,418,8697,6760,4229,3893,
                1411,484,4425,2109,421,2232,9663,7519,9873,6164,614,518,5394,106,7729,7785,8063,2999,1353,4493,1713,
                5075,5216,4485,9726,8806,9007,9148,624,5456,6743,1362,4244,2873,1270,4496,5789,9234,798,8650,6923,
                2333,5709,809,680,2238,4910,4436,7761,6912,8249,5062,3138,109,8144,7259,3553,7273,5048,8282,2833,2124,
                8382,7896,8112,6795,579,6717,7257,7431,1097,1243,3315,7948,6697,2902,1897,1362,4527,8118,4693,1804,
                647,780,1058,3569,197,1787,168,5485,2517,7735,575,1095,2122,4498,6648,7366,9302,1876,8129,2336,4212,
                6071,1589,9059,7902,4253,6432,5787,168,236,8491,2913,2403,4073,5613,7196,5851,548,8481,5557,6944,7647,
                247,6377,602,4777,5308,8403,2513,5051,2275,946,6953,1493,4790,8678,20,7401,4868,5900,5732,7815,4109,
                414,7877,6627,1238,4225,8612,3762,6784,8849,266,3168,3020,133,1353,6445,1900,6228,8470};
        var expected = -1;
        var result = LongestSquareStreakInArray.longestSquareStreak(input);

        assertEquals(expected, result);
    }
}