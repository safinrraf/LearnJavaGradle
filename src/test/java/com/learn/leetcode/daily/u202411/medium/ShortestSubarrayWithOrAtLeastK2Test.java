package com.learn.leetcode.daily.u202411.medium;

import com.learn.leetcode.daily.w2024.u202411.medium.ShortestSubarrayWithOrAtLeastK2;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ShortestSubarrayWithOrAtLeastK2Test {

    @Test
    void minimumSubarrayLength1() {
        var nums = new int[]{1,2,3};
        var k = 2;
        var expected = 1;
        var result = ShortestSubarrayWithOrAtLeastK2.minimumSubarrayLength(nums, k);

        assertEquals(expected, result);
    }

    @Test
    void minimumSubarrayLength2() {
        var nums = new int[]{2,1,8};
        var k = 10;
        var expected = 3;
        var result = ShortestSubarrayWithOrAtLeastK2.minimumSubarrayLength(nums, k);

        assertEquals(expected, result);
    }

    @Test
    void minimumSubarrayLength3() {
        var nums = new int[]{1,2};
        var k = 0;
        var expected = 1;
        var result = ShortestSubarrayWithOrAtLeastK2.minimumSubarrayLength(nums, k);

        assertEquals(expected, result);
    }

    @Test
    void minimumSubarrayLength4() {
        var nums = new int[]{1,2,32,21};
        var k = 55;
        var expected = 3;
        var result = ShortestSubarrayWithOrAtLeastK2.minimumSubarrayLength(nums, k);

        assertEquals(expected, result);
    }

    @Test
    void minimumSubarrayLength5() {
        var nums = new int[]{2,1,9,12};
        var k = 21;
        var expected = -1;
        var result = ShortestSubarrayWithOrAtLeastK2.minimumSubarrayLength(nums, k);

        assertEquals(expected, result);
    }

    @Test
    void minimumSubarrayLength6() {
        var nums = new int[]{262144,2,1,9,7,15,16,8,11,15,9,2,3,5,9,7,2,16,10,12,13,3,15,9,4,8,15,4,15,8,6,10,10,5,1,13,
                10,12,15,7,11,8,2,4,15,15,2,16,11,7,12,5,1,14,8,2,10,11,12,2,4,5,15,12,4,7,5,5,13,3,4,1,6,10,11,10,11,
                15,12,4,1,4,15,6,10,10,9,8,14,11,6,14,8,11,11,3,7,15,6,8,7,10,7,2,6,4,4,1,16,1,13,7,10,12,11,12,12,14,
                10,15,3,15,9,16,15,4,7,7,7,3,8,16,9,12,8,5,10,2,4,10,6,11,5,12,4,12,11,3,2,4,4,16,9,1,6,5,1,12,9,2,10,
                11,8,3,7,5,10,8,5,4,12,9,9,8,12,10,5,7,5,5,12,10,7,11,13,4,13,7,13,6,14,2,7,3,9,11,14,2,7,4,14,10,5,2,
                1,3,12,15,16,1,11,7,6,12,16,12,14,12,3,9,11,1,10,4,15,14,12,8,13,14,16,11,10,9,9,5,7,9,5,1,4,4,14,9,13,
                12,15,11,2,1,16,7,15,7,9,9,5,9,16,16,15,7,7,15,15,7,10,8,7,6,4,16,16,4,14,3,10,12,13,2,8,4,11,16,11,2,
                13,7,5,12,16,11,8,1,6,16,15,15,9,15,7,3,13,15,10,16,15,1,11,11,11,4,8,4,3,13,5,3,13,6,1,6,11,15,9,8,1,
                15,11,7,2,15,16,3,10,13,15,10,13,15,5,15,4,13,4,3,3,1,5,12,8,1,3,8,14,4,14,3,6,2,4,10,14,6,6,13,11,6,3,
                1,8,16,5,8,8,13,7,10,8,2,16,9,9,3,15,15,15,9,12,1,6,1,15,13,1,12,9,11,2,10,16,2,9,1,5,4,2,10,10,10,10,
                3,10,7,4,14,4,1,16,2,1,3,12,2,13,3,5,11,6,5,12,1,11,8,8,3,10,5,10,3,10,9,10,3,14,5,13,3,14,11,13,5,2,
                11,3,8,1,10,3,12,16,15,2,14,12,16,1,9,5,14,6,5,2,10,15,14,10,14,1,13,9,1,3,5,2,10,9,6,2,1,4,3,8,4,7,14,
                11,12,2,9,10,16,15,15,14,6,15,8,16,6,15,3,10,4,13,5,12,10,8,9,14,14,15,1,2,7,14,12,1,7,10,16,8,11,10,
                15,16,8,1,3,10,4,13,10,4,8,16,8,12,16,11,12,16,11,15,10,10,15,11,15,8,12,5,8,2,5,11,10,3,5,14,3,1,5,1,
                16,16,15,13,15,3,1,2,9,11,3,7,11,11,5,11,8,4,1,3,11,2,10,8,2,14,13,9,6,4,4,7,9,6,3,11,2,1,7,10,11,13,3,
                7,16,6,14,13,1,5,11,1,14,8,5,12,11,13,3,12,2,6,8,3,1,2,7,5,8,9,16,2,4,11,2,1,9,11,15,5,2,11,15,9,8,7,6,
                4,3,6,9,16,2,3,5,14,3,15,11,12,14,4,12,5,1,3,10,12,1,6,8,6,7,1,9,9,7,8,15,5,15,15,10,15,15,7,4,4,2,16,
                7,12,10,10,10,4,13,2,13,7,8,15,12,7,12,12,14,15,13,6,7,6,10,10,5,3,2,8,3,15,13,6,7,6,13,3,7,2,15,3,14,
                13,6,1,9,3,1,11,7,3,15,6,3,4,8,16,11,8,3,11,12,3,7,8,15,16,1,7,7,10,6,8,16,12,9,5,14,7,16,15,10,14,5,9,
                14,15,9,13,3,3,7,16,16,3,9,2,14,4,1,6,4,13,5,12,11,15,13,10,16,5,5,8,11,11,2,15,3,12,14,7,12,10,7,5,1,
                13,1,4,5,12,10,4,7,12,9,16,13,7,4,3,3,2,2,10,16,1,5,5,9,3,9,10,9,8,4,13,11,6,4,14,5,4,4,16,3,8,9,13,15,
                5,2,13,16,4,6,7,10,7,4,11,6,2,4,7,14,1,8,9,14,13,7,4,9,6,14,14,13,2,11,11,7,8,4,8,12,11,12,5,11,3,1,7,
                5,1,5,3,14,12,5,12,1,13,10,4,12,8,15,5,11,15,6,4,3,13,3,4,16,11,1,11,4,15,3,1,16,9,15,16,2,6,16,5,14,9,
                4,16,1,5,12,8,8,6,11,14,11,9,13,4,13,12,2,16,14,12,14,6,9,15,5,4,15,10,14,5,1,14,15,5,6,6,3,13,10,7,6,
                12,9,4,10,3,14,11,15,10,9,8,9,16,11,10,12,6,15,13,11,10,1,10,6,7,9,2,1,5,12,7,12,8,6,3,2,8,14,5,8,12,
                16,11,10,7,13,10,16,5,4,16,16,16,12,4,12,12,14,12,9,6,3,1,15,12,4,12,14,3,15,6,15,14,6,9,16,9,13,11,11,
                5,3,2,1,10,8,10,7,2,14,1,14,11,5,15,7,16,4,2,2,11,3,16,6,11,7,3,13,11,12,4,5,1,15,8,12,13,12,11,1,2,11,
                11,5,8,3,11,9,4,3,10,1,9,3,8,2,1,14,5,5,5,7,10,5,1,3,3,6,1,1,16,1,12,8,7,10,11,12,14,1,15,6,16,14,4,11,
                15,2,13,10,15,7,3,5,5,13,12,4,8,13,10,10,7,10,14,4,5,4,13,7,3,10,15,4,12,13,8,2,11,10,4,15,1,13,5,9,15,
                9,13,10,2,2,12,8,13,16,11,15,3,5,8,7,4,11,4,5,12,1,11,9,5,4,3,2,4,3,16,2,10,13,2,9,15,7,2,1,6,8,13,4,1,
                2,2,5,2,4,7,8,4,12,3,12,13,1,14,8,10,13,11,13,8,4,16,14,3,12,13,3,9,11,10,4,5,5,16,15,16,14,13,5,10,11,
                6,5,2,12,10,4,10,5,12,5,8,7,6,10,6,12,15,7,16,16,13,2,14,10,9,2,13,3,14,3,3,14,2,3,8,6,11,6,16,14,9,1,
                15,13,11,13,9,10,14,6,7,15,1,9,12,10,4,1,10,11,9,2,2,12,6,3,16,15,15,10,16,5,9,16,1,1,2,3,1,2,12,5,12,
                9,15,3,12,3,2,7,14,12,6,3,12,8,16,9,4,12,12,3,13,1,2,12,3,6,2,16,8,12,4,9,10,11,11,13,6,15,4,6,1,13,10,
                3,7,6,2,14,5,4,10,3,6,14,15,10,16,8,15,4,14,11,12,11,7,9,7,6,2,5,11,7,16,14,7,12,16,10,1,14,11,1,5,8,2,
                11,11,3,3,10,6,3,2,16,10,4,6,4,14,12,12,1,3,6,5,13,2,5,15,3,15,3,7,6,7,14,16,16,10,14,9,2,11,10,2,4,7,
                14,5,2,1,4,2,2,9,8,14,8,1,4,13,8,3,12,7,15,15,11,16,12,2,6,7,13,1,4,10,6,4,8,3,7,5,10,12,7,11,12,16,13,
                1,3,3,3,3,2,9,10,5,14,6,10,11,16,11,13,2,7,15,12,5,2,4,9,7,9,3,13,12,13,7,8,5,11,13,9,5,16,16,12,10,7,
                8,5,10,3,2,16,1,3,12,13,6,4,1,1,7,4,14,8,9,11,8,9,3,2,3,14,9,3,16,4,3,4,12,10,12,9,9,13,11,11,12,10,7,
                13,13,8,6,15,11,6,1,14,12,4,9,11,12,8,6,10,11,7,14,11,5,9,7,9,4,6,6,12,3,13,8,14,12,8,4,6,13,10,13,12,
                9,11,16,1,13,4,11,5,13,13,15,11,16,10,8,6,7,9,3,2,1,8,3,6,2,7,3,4,11,14,16,3,5,4,1,16,3,4,4,10,11,8,4,
                12,2,16,9,6,10,13,15,3,16,13,4,1,5,7,7,11,1,3,1,1,14,1,5,16,4,15,13,4,8,10,9,4,16,8,8,16,6,7,16,14,16,
                16,11,16,14,4,4,5,8,11,8,16,14,1,12,15,10,6,7,14,7,3,4,16,9,15,15,6,15,2,7,5,4,9,15,3,14,16,4,2,4,8,1,
                10,6,4,5,5,12,15,2,11,15,6,14,3,6,10,11,13,11,5,8,15,8,8,8,1,13,11,10,2,14,4,5,2,14,8,12,10,16,1,1,10,
                10,9,13,10,16,4,8,7,4,11,15,3,1,11,12,2,3,2,11,3,8,6,10,11,2,12,11,7,9,8,15,2,12,15,12,12,8,12,9,3,5,15,
                13,6,3,4,9,9,13,5,4,10,7,11,6,9,7,5,2,15,9,12,3,16,8,11,6,7,8,1,3,6,11,8,4,9,5,11,9,12,1,13,14,14,4,10,
                2,11,9,16,15,11,5,11,5,15,8,7,9,8,10,11,16,2,14,5,12,14,11,5,16,4,11,7,10,8,12,12,9,12,13,11,5,13,12,6,
                9,1,4,15,16,3,10,10,10,12,12,13,2,1,5,15,5,9,3,7,14,5,5,10,11,7,3,14,16,9,8,1,11,12,13,9,14};
        var k = 262169;
        var expected = 7;
        var result = ShortestSubarrayWithOrAtLeastK2.minimumSubarrayLength(nums, k);

        assertEquals(expected, result);
    }
}